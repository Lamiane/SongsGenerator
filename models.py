import numpy as np
import json
import utils  # the project utils, not the python utils
import datasets


def populate_markov(dataset):
    """ build markov chain based on dataset
    
    Parameters
    ----------
    dataset : list
        dataset generated with `utils.preprocess`
   
    Returns
    -------
    mm : {}
        built model
    """    
    mm={}
    for song in dataset:
        for i in range(len(song)-1):
            current = song[i]
            following = song[i+1]
            if current not in mm:
                mm[current]={}
            if following not in mm[current]:
                mm[current][following] = 0
            mm[current][following] += 1
    return mm


def how_often_sway_away(markov_model):
    """ How likely it is that the model will change the song

    Parameters
    ----------
    model : dict
        model generated by `populate_model` 
    """
    alle = 0
    fancy = 0
    for key in markov_model:
        alle += 1
        if len(markov_model[key])>=2:
            # print mm[key]
            fancy += 1

    print float(fancy)/alle
    

def generate(model, text = "to jest", length=100):
    """ from possible words choose the most likely
    
    Parameters
    ----------
    model : dict
        model generated by `populate_model` 
        
    text : str
        starting words
        
    length : int
        how many words should the text have
    
    Returns
    -------
    tek : str
        generated text 
    """
    current = tuple(text.split())
    tek = ' '.join(current)
    try:
        for i in range(length):
            highest_probability = 0
            possibilities = []
            for follower in model[current]:
                if model[current][follower] == highest_probability:
                    possibilities.append(follower)
                if model[current][follower] > highest_probability:
                    possibilities = [follower, ]
            the_chosen_one = possibilities[np.random.randint(len(possibilities))]
            tek += ' ' + the_chosen_one[-1]
            current = the_chosen_one
    except KeyError:
        return tek + '\nKONIEC'
    return tek


def unlikely_generate(model, text = "to jest", length=100):
    """ choose random word from possible words
    
    Parameters
    ----------
    model : dict
        model generated by `populate_model` 
        
    text : str
        starting words
        
    length : int
        how many words should the text have
    
    Returns
    -------
    tek : str
        generated text 
    """
    current = tuple(text.split())
    tek=' '.join(current)
    try:
        for i in range(length):
            highest_probability = 0
            possibilities = []
            for follower in model[current]:
                possibilities.append(follower)
            the_chosen_one = possibilities[np.random.randint(len(possibilities))]
            tek += ' ' + the_chosen_one[-1]
            current = the_chosen_one
    except KeyError:
        return tek + '\nKONIEC'
    return tek


if __name__=='__main__':
    # model based on downloaded text songs
    with open('dataset.json', 'r') as f:
        dataset = json.load(f)
        
    preprocessed = utils.preprocess(dataset, ngram=3)
    
    model = populate_markov(preprocessed)
    
    print('How likely it is that the model will change the song:')
    how_often_sway_away(model)
    
    starting_words = u"u ciebie jest"
    
    print('\n\n\tGeneration method 1:')
    utils.print_a_song(generate(model, text=starting_words))
    
    print('\n\n\tGeneration method 2:')  
    utils.print_a_song(unlikely_generate(model, text = starting_words))
    
    # merge poems from files to songs:
    print('\n\n\nBuilding model on both songs and poetry')
    mick = datasets.get_data_from_file(['mickiewicz.txt'], ['mickiewicz'])
    
    double_dataset = dict(dataset)
    double_dataset['mick'] = datasets.get_data_from_file(['mickiewicz.txt'], ['mickiewicz'])['mickiewicz']

    double_dataset = utils.preprocess(double_dataset, ngram=3)
    double_model = populate_markov(double_dataset)
    print('How likely it is that the model will change the song:')
    how_often_sway_away(double_model)
    print('\n\nText generated using model with train on both songs and poems:')  
    utils.print_a_song(unlikely_generate(double_model, u"litwo ! ojczyzno"))
